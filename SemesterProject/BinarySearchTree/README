A binary search tree is a collection of nodes which start from a single node, the "root", and move down different paths
or "branches," with their location on the tree being based on their relationships to the other nodes. An added node will
move to the left if it is less than the node above it, or to the right if it is greater than the node above it. A full
binary search tree is an effective way of storing data and can grow to be very large with many different paths.

To create a binary search tree using this program, the user must first call the insertNode method which will create the
root of the tree if one doesn't already exist, with calls of the insertNode method that follow adding additional nodes
to the tree. From there, the user can call many different methods to search or alter the tree, including ways to remove
nodes, sort the nodes based on their values or positions, and find where certain values are located on the tree.

Methods include the following:
insertNode - creates a tree/adds a value to the tree
printInOrder - prints the values in numeric order
printPreOrder - uses a preorder traversal to print the whole tree
printPostOrder - uses a postorder traversal to print the whole tree
findSmallest - finds the smallest value in the tree
findLargest - finds the largest value in the tree
elementSearch - finds if a certain value is in the tree
findNth - finds which value is at a specified location
removeNode - removes a node from the tree
depthFirstSearch - finds a value in the tree using a depth first search
breadthFirstSearch - finds a value in the tree using a breadth first search